{"version":3,"sources":["escape-compiled-compiled-compiled.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,iBAAiB,QAAQ,mBAAR,CAArB;AAAA,IACI,WAAW,QAAQ,YAAR,CADf;;AAGA;AACA,IAAI,kBAAkB,WAAtB;AAAA,IACI,qBAAqB,OAAO,gBAAgB,MAAvB,CADzB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAAS,MAAT,CAAgB,MAAhB,EAAwB;AACpB,aAAS,SAAS,MAAT,CAAT;AACA,WAAO,UAAU,mBAAmB,IAAnB,CAAwB,MAAxB,CAAV,GAA4C,OAAO,OAAP,CAAe,eAAf,EAAgC,cAAhC,CAA5C,GAA8F,MAArG;AACH;;AAED,OAAO,OAAP,GAAiB,MAAjB;;AAEA;;AAEA;;AAEA","file":"escape-compiled-compiled-compiled-compiled.js","sourcesContent":["'use strict';\n\nvar escapeHtmlChar = require('./_escapeHtmlChar'),\n    toString = require('./toString');\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"'`]/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\n * their corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * Backticks are escaped because in IE < 9, they can break out of\n * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n * [#133](https://html5sec.org/#133) of the\n * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n    string = toString(string);\n    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;\n}\n\nmodule.exports = escape;\n\n//# sourceMappingURL=escape-compiled.js.map\n\n//# sourceMappingURL=escape-compiled-compiled.js.map\n\n//# sourceMappingURL=escape-compiled-compiled-compiled.js.map"]}