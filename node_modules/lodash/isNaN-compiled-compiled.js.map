{"version":3,"sources":["isNaN-compiled.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAAS,KAAT,CAAe,KAAf,EAAsB;AACpB;AACA;AACA;AACA,SAAO,SAAS,KAAT,KAAmB,SAAS,CAAC,KAApC;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB;;AAEA","file":"isNaN-compiled-compiled.js","sourcesContent":["'use strict';\n\nvar isNumber = require('./isNumber');\n\n/**\n * Checks if `value` is `NaN`.\n *\n * **Note:** This method is based on\n * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n * `undefined` and other non-number values.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n * @example\n *\n * _.isNaN(NaN);\n * // => true\n *\n * _.isNaN(new Number(NaN));\n * // => true\n *\n * isNaN(undefined);\n * // => true\n *\n * _.isNaN(undefined);\n * // => false\n */\nfunction isNaN(value) {\n  // An `NaN` primitive is the only value that is not equal to itself.\n  // Perform the `toStringTag` check first to avoid errors with some\n  // ActiveX objects in IE.\n  return isNumber(value) && value != +value;\n}\n\nmodule.exports = isNaN;\n\n//# sourceMappingURL=isNaN-compiled.js.map"]}