{"version":3,"sources":["_isIndex-compiled-compiled-compiled.js"],"names":[],"mappings":"AAAA;;AAEA;;AAEA,IAAI,mBAAmB,gBAAvB;;AAEA;AACA,IAAI,WAAW,kBAAf;;AAEA;;;;;;;;AAQA,SAAS,OAAT,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC;AAC9B,WAAS,UAAU,IAAV,GAAiB,gBAAjB,GAAoC,MAA7C;AACA,SAAO,CAAC,CAAC,MAAF,KAAa,OAAO,KAAP,IAAgB,QAAhB,IAA4B,SAAS,IAAT,CAAc,KAAd,CAAzC,KAAkE,QAAQ,CAAC,CAA3E,IAAgF,QAAQ,CAAR,IAAa,CAA7F,IAAkG,QAAQ,MAAjH;AACD;;AAED,OAAO,OAAP,GAAiB,OAAjB;;AAEA;;AAEA;;AAEA","file":"_isIndex-compiled-compiled-compiled-compiled.js","sourcesContent":["'use strict';\n\n/** Used as references for various `Number` constants. */\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n\nmodule.exports = isIndex;\n\n//# sourceMappingURL=_isIndex-compiled.js.map\n\n//# sourceMappingURL=_isIndex-compiled-compiled.js.map\n\n//# sourceMappingURL=_isIndex-compiled-compiled-compiled.js.map"]}