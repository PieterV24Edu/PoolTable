{"version":3,"sources":["forInRight-compiled-compiled.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,eAAe,QAAQ,iBAAR,CAAnB;AAAA,IACI,eAAe,QAAQ,iBAAR,CADnB;AAAA,IAEI,SAAS,QAAQ,UAAR,CAFb;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAAS,UAAT,CAAoB,MAApB,EAA4B,QAA5B,EAAsC;AAClC,WAAO,UAAU,IAAV,GAAiB,MAAjB,GAA0B,aAAa,MAAb,EAAqB,aAAa,QAAb,EAAuB,CAAvB,CAArB,EAAgD,MAAhD,CAAjC;AACH;;AAED,OAAO,OAAP,GAAiB,UAAjB;;AAEA;;AAEA","file":"forInRight-compiled-compiled-compiled.js","sourcesContent":["'use strict';\n\nvar baseForRight = require('./_baseForRight'),\n    baseIteratee = require('./_baseIteratee'),\n    keysIn = require('./keysIn');\n\n/**\n * This method is like `_.forIn` except that it iterates over properties of\n * `object` in the opposite order.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forInRight(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n */\nfunction forInRight(object, iteratee) {\n    return object == null ? object : baseForRight(object, baseIteratee(iteratee, 3), keysIn);\n}\n\nmodule.exports = forInRight;\n\n//# sourceMappingURL=forInRight-compiled.js.map\n\n//# sourceMappingURL=forInRight-compiled-compiled.js.map"]}