{"version":3,"sources":["template-compiled-compiled.js"],"names":[],"mappings":"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","file":"template-compiled-compiled-compiled.js","sourcesContent":["'use strict';\n\nvar assignInDefaults = require('./_assignInDefaults'),\n    assignInWith = require('./assignInWith'),\n    attempt = require('./attempt'),\n    baseValues = require('./_baseValues'),\n    escapeStringChar = require('./_escapeStringChar'),\n    isError = require('./isError'),\n    isIterateeCall = require('./_isIterateeCall'),\n    keys = require('./keys'),\n    reInterpolate = require('./_reInterpolate'),\n    templateSettings = require('./templateSettings'),\n    toString = require('./toString');\n\n/** Used to match empty string literals in compiled template source. */\nvar reEmptyStringLeading = /\\b__p \\+= '';/g,\n    reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n    reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n/**\n * Used to match\n * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n */\nvar reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n/** Used to ensure capturing order of template delimiters. */\nvar reNoMatch = /($^)/;\n\n/** Used to match unescaped characters in compiled string literals. */\nvar reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n/**\n * Creates a compiled template function that can interpolate data properties\n * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n * properties may be accessed as free variables in the template. If a setting\n * object is given, it takes precedence over `_.templateSettings` values.\n *\n * **Note:** In the development build `_.template` utilizes\n * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n * for easier debugging.\n *\n * For more information on precompiling templates see\n * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n *\n * For more information on Chrome extension sandboxes see\n * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The template string.\n * @param {Object} [options={}] The options object.\n * @param {RegExp} [options.escape=_.templateSettings.escape]\n *  The HTML \"escape\" delimiter.\n * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n *  The \"evaluate\" delimiter.\n * @param {Object} [options.imports=_.templateSettings.imports]\n *  An object to import into the template as free variables.\n * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n *  The \"interpolate\" delimiter.\n * @param {string} [options.sourceURL='templateSources[n]']\n *  The sourceURL of the compiled template.\n * @param {string} [options.variable='obj']\n *  The data object variable name.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Function} Returns the compiled template function.\n * @example\n *\n * // Use the \"interpolate\" delimiter to create a compiled template.\n * var compiled = _.template('hello <%= user %>!');\n * compiled({ 'user': 'fred' });\n * // => 'hello fred!'\n *\n * // Use the HTML \"escape\" delimiter to escape data property values.\n * var compiled = _.template('<b><%- value %></b>');\n * compiled({ 'value': '<script>' });\n * // => '<b>&lt;script&gt;</b>'\n *\n * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n * compiled({ 'users': ['fred', 'barney'] });\n * // => '<li>fred</li><li>barney</li>'\n *\n * // Use the internal `print` function in \"evaluate\" delimiters.\n * var compiled = _.template('<% print(\"hello \" + user); %>!');\n * compiled({ 'user': 'barney' });\n * // => 'hello barney!'\n *\n * // Use the ES delimiter as an alternative to the default \"interpolate\" delimiter.\n * var compiled = _.template('hello ${ user }!');\n * compiled({ 'user': 'pebbles' });\n * // => 'hello pebbles!'\n *\n * // Use backslashes to treat delimiters as plain text.\n * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n * compiled({ 'value': 'ignored' });\n * // => '<%- value %>'\n *\n * // Use the `imports` option to import `jQuery` as `jq`.\n * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n * compiled({ 'users': ['fred', 'barney'] });\n * // => '<li>fred</li><li>barney</li>'\n *\n * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n * compiled(data);\n * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n *\n * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n * compiled.source;\n * // => function(data) {\n * //   var __t, __p = '';\n * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n * //   return __p;\n * // }\n *\n * // Use custom template delimiters.\n * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n * var compiled = _.template('hello {{ user }}!');\n * compiled({ 'user': 'mustache' });\n * // => 'hello mustache!'\n *\n * // Use the `source` property to inline compiled templates for meaningful\n * // line numbers in error messages and stack traces.\n * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n *   var JST = {\\\n *     \"main\": ' + _.template(mainText).source + '\\\n *   };\\\n * ');\n */\nfunction template(string, options, guard) {\n  // Based on John Resig's `tmpl` implementation\n  // (http://ejohn.org/blog/javascript-micro-templating/)\n  // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n  var settings = templateSettings.imports._.templateSettings || templateSettings;\n\n  if (guard && isIterateeCall(string, options, guard)) {\n    options = undefined;\n  }\n  string = toString(string);\n  options = assignInWith({}, options, settings, assignInDefaults);\n\n  var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),\n      importsKeys = keys(imports),\n      importsValues = baseValues(imports, importsKeys);\n\n  var isEscaping,\n      isEvaluating,\n      index = 0,\n      interpolate = options.interpolate || reNoMatch,\n      source = \"__p += '\";\n\n  // Compile the regexp to match each delimiter.\n  var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');\n\n  // Use a sourceURL for easier debugging.\n  var sourceURL = 'sourceURL' in options ? '//# sourceURL=' + options.sourceURL + '\\n' : '';\n\n  string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n    interpolateValue || (interpolateValue = esTemplateValue);\n\n    // Escape characters that can't be included in string literals.\n    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n    // Replace delimiters with snippets.\n    if (escapeValue) {\n      isEscaping = true;\n      source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n    }\n    if (evaluateValue) {\n      isEvaluating = true;\n      source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n    }\n    if (interpolateValue) {\n      source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n    }\n    index = offset + match.length;\n\n    // The JS engine embedded in Adobe products needs `match` returned in\n    // order to produce the correct `offset` value.\n    return match;\n  });\n\n  source += \"';\\n\";\n\n  // If `variable` is not specified wrap a with-statement around the generated\n  // code to add the data object to the top of the scope chain.\n  var variable = options.variable;\n  if (!variable) {\n    source = 'with (obj) {\\n' + source + '\\n}\\n';\n  }\n  // Cleanup code by stripping empty strings.\n  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');\n\n  // Frame code as the function body.\n  source = 'function(' + (variable || 'obj') + ') {\\n' + (variable ? '' : 'obj || (obj = {});\\n') + \"var __t, __p = ''\" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\\n' + \"function print() { __p += __j.call(arguments, '') }\\n\" : ';\\n') + source + 'return __p\\n}';\n\n  var result = attempt(function () {\n    return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);\n  });\n\n  // Provide the compiled function's source by its `toString` method or\n  // the `source` property as a convenience for inlining compiled templates.\n  result.source = source;\n  if (isError(result)) {\n    throw result;\n  }\n  return result;\n}\n\nmodule.exports = template;\n\n//# sourceMappingURL=template-compiled.js.map\n\n//# sourceMappingURL=template-compiled-compiled.js.map"]}