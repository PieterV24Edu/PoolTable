{"version":3,"sources":["uniqWith-compiled-compiled.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,WAAW,QAAQ,aAAR,CAAf;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,UAAzB,EAAqC;AACnC,SAAO,SAAS,MAAM,MAAf,GAAwB,SAAS,KAAT,EAAgB,SAAhB,EAA2B,UAA3B,CAAxB,GAAiE,EAAxE;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB;;AAEA;;AAEA","file":"uniqWith-compiled-compiled-compiled.js","sourcesContent":["'use strict';\n\nvar baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The comparator is invoked with\n * two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.uniqWith(objects, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n */\nfunction uniqWith(array, comparator) {\n  return array && array.length ? baseUniq(array, undefined, comparator) : [];\n}\n\nmodule.exports = uniqWith;\n\n//# sourceMappingURL=uniqWith-compiled.js.map\n\n//# sourceMappingURL=uniqWith-compiled-compiled.js.map"]}