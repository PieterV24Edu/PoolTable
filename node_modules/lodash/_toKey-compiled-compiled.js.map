{"version":3,"sources":["_toKey-compiled.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,WAAW,QAAQ,YAAR,CAAf;;AAEA;AACA,IAAI,WAAW,IAAI,CAAnB;;AAEA;;;;;;;AAOA,SAAS,KAAT,CAAe,KAAf,EAAsB;AACpB,MAAI,OAAO,KAAP,IAAgB,QAAhB,IAA4B,SAAS,KAAT,CAAhC,EAAiD;AAC/C,WAAO,KAAP;AACD;AACD,MAAI,SAAS,QAAQ,EAArB;AACA,SAAO,UAAU,GAAV,IAAiB,IAAI,KAAJ,IAAa,CAAC,QAA/B,GAA0C,IAA1C,GAAiD,MAAxD;AACD;;AAED,OAAO,OAAP,GAAiB,KAAjB;;AAEA","file":"_toKey-compiled-compiled.js","sourcesContent":["'use strict';\n\nvar isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nmodule.exports = toKey;\n\n//# sourceMappingURL=_toKey-compiled.js.map"]}