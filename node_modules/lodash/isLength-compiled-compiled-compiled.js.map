{"version":3,"sources":["isLength-compiled-compiled.js"],"names":[],"mappings":"AAAA;;AAEA;;AAEA,IAAI,mBAAmB,gBAAvB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,SAAO,OAAO,KAAP,IAAgB,QAAhB,IAA4B,QAAQ,CAAC,CAArC,IAA0C,QAAQ,CAAR,IAAa,CAAvD,IAA4D,SAAS,gBAA5E;AACD;;AAED,OAAO,OAAP,GAAiB,QAAjB;;AAEA;;AAEA","file":"isLength-compiled-compiled-compiled.js","sourcesContent":["'use strict';\n\n/** Used as references for various `Number` constants. */\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n//# sourceMappingURL=isLength-compiled.js.map\n\n//# sourceMappingURL=isLength-compiled-compiled.js.map"]}