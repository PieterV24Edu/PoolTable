{"version":3,"sources":["extract-props-compiled.min-compiled.min-compiled.min.js"],"names":[],"mappings":";AACA;AAAa,IAAI,KAAG,QAAQ,eAAR,CAAP,CAAgC,IAAI,KAAG,QAAQ,IAAR,CAAP,CAAqB,IAAI,QAAM,QAAQ,OAAR,CAAV,CAA2B,IAAI,OAAK,MAAM,QAAN,CAAe,GAAf,EAAmB,aAAnB,EAAkC,IAA3C,CAAgD,IAAI,QAAM,KAAK,CAAL,CAAO,KAAP,EAAV,CAAyB,IAAI,SAAO,EAAC,MAAK,EAAN,EAAS,OAAM,EAAf,EAAX,CAA8B,IAAG,KAAK,CAAR,EAAU,IAAG;AAAC,WAAO,KAAK,KAAL,CAAW,GAAG,YAAH,CAAgB,KAAK,CAArB,EAAuB,MAAvB,CAAX,CAAP;AAAkD,CAAtD,CAAsD,OAAM,EAAN,EAAS,CAAE,OAAM,OAAN,CAAc,QAAd,EAAwB,IAAG,KAAK,CAAR,EAAU;AAAC,KAAG,aAAH,CAAiB,KAAK,CAAtB,EAAwB,KAAK,SAAL,CAAe,MAAf,EAAsB,IAAtB,EAA2B,CAA3B,CAAxB,EAAsD,MAAtD;AAA8D,CAAzE,MAA6E;AAAC,UAAQ,GAAR,CAAY,IAAZ,EAAiB,KAAK,SAAL,CAAe,MAAf,EAAsB,IAAtB,EAA2B,CAA3B,CAAjB;AAAgD,UAAS,QAAT,CAAkB,QAAlB,EAA2B;AAAC,MAAI,OAAK,GAAG,YAAH,CAAgB,QAAhB,EAAyB,MAAzB,CAAT,CAA0C,IAAI,MAAI,GAAG,KAAH,CAAS,IAAT,CAAR,CAAuB,IAAI,IAAJ,CAAS,IAAI,GAAG,UAAP,CAAkB,UAAS,IAAT,EAAc;AAAC,QAAG,gBAAgB,GAAG,gBAAtB,EAAuC;AAAC,UAAI,KAAK,GAAT;AAAc,KAAtD,MAA2D,IAAG,gBAAgB,GAAG,kBAAtB,EAAyC;AAAC,UAAI,KAAK,GAAL,CAAS,IAAb;AAAmB,KAA7D,MAAkE,IAAG,gBAAgB,GAAG,OAAtB,EAA8B;AAAC,UAAI,KAAK,QAAT;AAAmB,KAAlD,MAAuD,IAAG,gBAAgB,GAAG,OAAtB,EAA8B;AAAC,iBAAW,KAAK,QAAhB;AAA0B;AAAC,GAA/Q,CAAT,EAA2R,SAAS,UAAT,CAAoB,IAApB,EAAyB;AAAC,QAAI,MAAI,EAAR,CAAW,IAAG;AAAC,OAAC,SAAS,IAAT,CAAc,IAAd,EAAmB;AAAC,aAAK,IAAL,CAAU,IAAI,GAAG,UAAP,CAAkB,UAAS,IAAT,EAAc;AAAC,cAAG,gBAAgB,GAAG,OAAtB,EAA8B;AAAC,iBAAK,KAAK,GAAV,EAAe,OAAO,IAAP;AAAY,eAAG,gBAAgB,GAAG,UAAtB,EAAiC;AAAC,gBAAI,KAAK,KAAT,EAAgB,OAAO,IAAP;AAAY,eAAG,gBAAgB,GAAG,eAAtB,EAAsC;AAAC,iBAAK,KAAK,UAAV,EAAsB,KAAK,KAAK,WAAV,EAAuB,OAAO,IAAP;AAAY,iBAAM,GAAN;AAAU,SAAnQ,CAAV;AAAgR,OAArS,EAAuS,IAAvS;AAA6S,KAAjT,CAAiT,OAAM,EAAN,EAAS;AAAC,UAAG,OAAK,GAAR,EAAY,MAAM,EAAN;AAAS;AAAC,YAAS,GAAT,CAAa,IAAb,EAAkB;AAAC,WAAO,KAAP,CAAa,IAAb,IAAmB,IAAnB;AAAwB;AAAC","file":"extract-props-compiled.min-compiled.min-compiled.min-compiled.js","sourcesContent":["#! /usr/bin/env node\n\"use strict\";var U2=require(\"../tools/node\");var fs=require(\"fs\");var yargs=require(\"yargs\");var ARGS=yargs.describe(\"o\",\"Output file\").argv;var files=ARGS._.slice();var output={vars:{},props:{}};if(ARGS.o)try{output=JSON.parse(fs.readFileSync(ARGS.o,\"utf8\"))}catch(ex){}files.forEach(getProps);if(ARGS.o){fs.writeFileSync(ARGS.o,JSON.stringify(output,null,2),\"utf8\")}else{console.log(\"%s\",JSON.stringify(output,null,2))}function getProps(filename){var code=fs.readFileSync(filename,\"utf8\");var ast=U2.parse(code);ast.walk(new U2.TreeWalker(function(node){if(node instanceof U2.AST_ObjectKeyVal){add(node.key)}else if(node instanceof U2.AST_ObjectProperty){add(node.key.name)}else if(node instanceof U2.AST_Dot){add(node.property)}else if(node instanceof U2.AST_Sub){addStrings(node.property)}}));function addStrings(node){var out={};try{(function walk(node){node.walk(new U2.TreeWalker(function(node){if(node instanceof U2.AST_Seq){walk(node.cdr);return true}if(node instanceof U2.AST_String){add(node.value);return true}if(node instanceof U2.AST_Conditional){walk(node.consequent);walk(node.alternative);return true}throw out}))})(node)}catch(ex){if(ex!==out)throw ex}}function add(name){output.props[name]=true}}"]}