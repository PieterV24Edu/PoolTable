{"version":3,"sources":["PoolBall.js"],"names":[],"mappings":"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","file":"PoolBall-compiled.js","sourcesContent":["class PoolBall\r\n{\r\n    constructor(name)\r\n    {\r\n        this.name = name;\r\n        this.Radius = 2.85;\r\n        this.Geometry = new THREE.SphereGeometry(this.Radius, 32, 32);\r\n        this.Material = new THREE.MeshPhongMaterial({color: 0xFFFFFF});\r\n        this.Mesh = new THREE.Mesh(this.Geometry, this.Material);\r\n        this.Mesh.position.y = 2.85;\r\n\r\n        this.Direction = new THREE.Vector3(0,0,0);\r\n        this.Direction.normalize();\r\n        this.speed = 0;\r\n        this.currentSpeed = new THREE.Vector3();\r\n        this.Mesh.castShadow = true;\r\n\r\n        this.rayCaster = new THREE.Raycaster();\r\n    }\r\n\r\n    CalcMovement(delta, tableGroup)\r\n    {\r\n        this.UpdateCurrentSpeed(delta);\r\n        if(this.Direction.x > 0)\r\n            this.CheckColistion(1,0,0, tableGroup, delta);\r\n        else if(this.Direction.x < 0)\r\n            this.CheckColistion(-1,0,0, tableGroup, delta);\r\n\r\n        if(this.Direction.z > 0)\r\n            this.CheckColistion(0,0,1, tableGroup, delta);\r\n        else if(this.Direction.z < 0)\r\n            this.CheckColistion(0,0,-1, tableGroup, delta);\r\n        //Move Ball\r\n        this.Mesh.position.add(this.currentSpeed);\r\n        this.UpdateRotation();\r\n        if(this.speed > 0.1)\r\n            this.speed -= ((0.35 * delta) * this.speed);\r\n        else\r\n            this.speed = 0;\r\n    }\r\n\r\n    CheckColistion(x,y,z, tGroup, delta)\r\n    {\r\n        var direction = new THREE.Vector3(x,y,z);\r\n        var directionSpeed = new THREE.Vector3().copy(this.currentSpeed).multiply(direction).toArray().reduce((a,b) => a + b, 0);\r\n        this.rayCaster.set(this.Mesh.position, direction);\r\n        var intersections = this.rayCaster.intersectObjects(tGroup);\r\n\r\n        if(intersections.length > 0)\r\n        {\r\n            var intersection = intersections[0];\r\n\r\n            if(intersection.distance < 3 || directionSpeed > intersection.distance) {\r\n                this.Direction.reflect(intersection.face.normal);\r\n                this.UpdateCurrentSpeed(delta);\r\n            }\r\n        }\r\n    }\r\n\r\n    UpdateCurrentSpeed(delta)\r\n    {\r\n        this.currentSpeed.copy(this.Direction).multiplyScalar(delta * this.speed);\r\n    }\r\n\r\n    SetDirection(x, z)\r\n    {\r\n        this.Direction.set(x,0,z);\r\n        this.Direction.normalize();\r\n    }\r\n\r\n    SetSpeed(speed)\r\n    {\r\n        this.speed = speed;\r\n    }\r\n\r\n    CheckBallCollision(otherBall)\r\n    {\r\n        var thisBallPos = new THREE.Vector3().copy(this.mesh.position);\r\n        var otherBallPos = new THREE.Vector3().copy(otherBall.mesh.position);\r\n\r\n        var distance = thisBallPos.distanceTo(otherBallPos);\r\n\r\n        if(distance < (this.Radius + otherBall.Radius))\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    BallCollision(otherBall)\r\n    {\r\n        var thisBallPos = new THREE.Vector3().copy(this.mesh.position);\r\n        var otherBallPos = new THREE.Vector3().copy(otherBall.mesh.position);\r\n\r\n        var distance = thisBallPos.distanceTo(otherBallPos);\r\n\r\n        if(distance <= (this.Radius + otherBall.Radius))\r\n        {\r\n            var thisSpeed = new THREE.Vector3(this.Direction.x * this.speed, 0, this.Direction.z * this.speed);\r\n            var otherSpeed = new THREE.Vector3(otherBall.Direction.x * otherBall.speed, 0, otherBall.Direction.z * otherBall.speed);\r\n\r\n            var unitNormal = new THREE.Vector3(otherBallPos.x - thisBallPos.x, 0, otherBallPos.z - thisBallPos.z).normalize();\r\n            var unitTangent = new THREE.Vector3(-unitNormal.z, unitNormal.y, unitNormal.x);\r\n\r\n            var thisBallNV = unitNormal.dot(thisSpeed);\r\n            var otherBallNV = unitNormal.dot(otherSpeed);\r\n            var thisBallTV = unitTangent.dot(thisSpeed);\r\n            var otherBallTV = unitTangent.dot(otherSpeed);\r\n\r\n            var PthisBallNV = (thisBallNV * (this.Radius - otherBall.Radius) + 2 * otherBall.Radius * otherBallNV) / (this.Radius + otherBall.Radius);\r\n            var PotherBallNV = (otherBallNV * (otherBall.Radius - this.Radius) + 2 * this.Radius * thisBallNV) / (this.Radius + otherBall.Radius);\r\n\r\n            var thisBallNVec = new THREE.Vector3().copy(unitNormal).multiplyScalar(PthisBallNV);\r\n            var thisBallTVec = new THREE.Vector3().copy(unitTangent).multiplyScalar(thisBallTV);\r\n            var otherBallNVec = new THREE.Vector3().copy(unitNormal).multiplyScalar(PotherBallNV);\r\n            var otherBallTVec = new THREE.Vector3().copy(unitTangent).multiplyScalar(otherBallTV);\r\n\r\n            var thisBallVec = new THREE.Vector3().copy(thisBallNVec).add(thisBallTVec);\r\n            var otherBallVec = new THREE.Vector3().copy(otherBallNVec).add(otherBallTVec);\r\n\r\n            var thisBallSpeed = thisBallVec.length();\r\n            var otherBallSpeed = otherBallVec.length();\r\n\r\n            this.Direction = thisBallVec.normalize();\r\n            otherBall.Direction = otherBallVec.normalize();\r\n\r\n            this.SetSpeed(thisBallSpeed);\r\n            otherBall.SetSpeed(otherBallSpeed);\r\n        }\r\n    }\r\n\r\n    UpdateRotation()\r\n    {\r\n        var distance = new THREE.Vector3().copy(this.currentSpeed).length();\r\n        var angle = (distance * (2*this.Radius*Math.PI)) * Math.PI;\r\n        var axis = new THREE.Vector3(-this.Direction.z, 0, this.Direction.x);\r\n\r\n        var quaternion = new THREE.Quaternion();\r\n        quaternion.setFromAxisAngle(axis, angle);\r\n        var curQuaternion = this.Mesh.quaternion;\r\n        curQuaternion.multiplyQuaternions(quaternion, curQuaternion);\r\n        curQuaternion.normalize();\r\n        this.Mesh.setRotationFromQuaternion(curQuaternion);\r\n    }\r\n\r\n    get mesh()\r\n    {\r\n        return this.Mesh;\r\n    }\r\n\r\n    get position()\r\n    {\r\n        return this.Mesh.position;\r\n    }\r\n}\r\n"]}